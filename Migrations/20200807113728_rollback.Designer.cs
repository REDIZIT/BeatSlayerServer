// <auto-generated />
using System;
using BeatSlayerServer.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeatSlayerServer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200807113728_rollback")]
    partial class rollback
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BeatSlayerServer.Models.Database.CodeVerificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Nick")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VerificationRequests");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.DifficultyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BombsCount")
                        .HasColumnType("int");

                    b.Property<int>("CubesCount")
                        .HasColumnType("int");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<int>("InnerId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("LinesCount")
                        .HasColumnType("int");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<float>("MaxRP")
                        .HasColumnType("float");

                    b.Property<float>("MaxScore")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("DifficultyInfo");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.MapInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Nick")
                        .HasColumnType("text");

                    b.Property<int>("PublishStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("MapInfo");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.PurchaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.ReplayInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CubesSliced")
                        .HasColumnType("int");

                    b.Property<int?>("DifficultyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyStars")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("Missed")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<double>("RP")
                        .HasColumnType("double");

                    b.Property<float>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyInfoId");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("BeatSlayerServer.Utils.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("A")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("AllScore")
                        .HasColumnType("double");

                    b.Property<int>("B")
                        .HasColumnType("int");

                    b.Property<int>("C")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("D")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("InGameTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastActiveTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MapsPublished")
                        .HasColumnType("int");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int>("Misses")
                        .HasColumnType("int");

                    b.Property<string>("Nick")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PlaceInRanking")
                        .HasColumnType("int");

                    b.Property<int>("PublishedMapsLiked")
                        .HasColumnType("int");

                    b.Property<int>("PublishedMapsPlayed")
                        .HasColumnType("int");

                    b.Property<double>("RP")
                        .HasColumnType("double");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("S")
                        .HasColumnType("int");

                    b.Property<int>("SS")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignUpTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BeatSlayerServer.Utils.Database.GroupInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BeatSlayerServer.Utils.Notifications.NotificationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterNick")
                        .HasColumnType("text");

                    b.Property<string>("TargetNick")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.DifficultyInfo", b =>
                {
                    b.HasOne("BeatSlayerServer.Models.Database.MapInfo", "Map")
                        .WithMany("Difficulties")
                        .HasForeignKey("MapId");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.MapInfo", b =>
                {
                    b.HasOne("BeatSlayerServer.Utils.Database.GroupInfo", "Group")
                        .WithMany("Maps")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.PurchaseModel", b =>
                {
                    b.HasOne("BeatSlayerServer.Utils.Database.Account", null)
                        .WithMany("Purchase")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("BeatSlayerServer.Models.Database.ReplayInfo", b =>
                {
                    b.HasOne("BeatSlayerServer.Models.Database.DifficultyInfo", null)
                        .WithMany("Replays")
                        .HasForeignKey("DifficultyInfoId");

                    b.HasOne("BeatSlayerServer.Models.Database.MapInfo", "Map")
                        .WithMany("Replays")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSlayerServer.Utils.Database.Account", "Player")
                        .WithMany("Replays")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeatSlayerServer.Utils.Database.Account", b =>
                {
                    b.HasOne("BeatSlayerServer.Utils.Database.Account", null)
                        .WithMany("Friends")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("BeatSlayerServer.Utils.Notifications.NotificationInfo", b =>
                {
                    b.HasOne("BeatSlayerServer.Utils.Database.Account", null)
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId");
                });
#pragma warning restore 612, 618
        }
    }
}
